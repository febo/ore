/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU64Encoder,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedClaimInstruction,
  type ParsedCloseInstruction,
  type ParsedInitializeInstruction,
  type ParsedMineInstruction,
  type ParsedOpenInstruction,
  type ParsedResetInstruction,
  type ParsedStakeInstruction,
  type ParsedUpdateInstruction,
  type ParsedUpgradeInstruction,
} from '../instructions';

export const ORE_PROGRAM_ADDRESS =
  'oreV2ZymfyeXgNgBdqMkumTqqAprVqgBWQfoYkrtKWQ' as Address<'oreV2ZymfyeXgNgBdqMkumTqqAprVqgBWQfoYkrtKWQ'>;

export enum OreAccount {
  Bus,
  Config,
  Proof,
  Treasury,
}

export function identifyOreAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): OreAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU64Encoder().encode(100), 0)) {
    return OreAccount.Bus;
  }
  if (containsBytes(data, getU64Encoder().encode(101), 0)) {
    return OreAccount.Config;
  }
  if (containsBytes(data, getU64Encoder().encode(102), 0)) {
    return OreAccount.Proof;
  }
  if (containsBytes(data, getU64Encoder().encode(103), 0)) {
    return OreAccount.Treasury;
  }
  throw new Error(
    'The provided account could not be identified as a ore account.'
  );
}

export enum OreInstruction {
  Claim,
  Close,
  Mine,
  Open,
  Reset,
  Stake,
  Update,
  Upgrade,
  Initialize,
}

export function identifyOreInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): OreInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return OreInstruction.Claim;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return OreInstruction.Close;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return OreInstruction.Mine;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return OreInstruction.Open;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return OreInstruction.Reset;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return OreInstruction.Stake;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return OreInstruction.Update;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return OreInstruction.Upgrade;
  }
  if (containsBytes(data, getU8Encoder().encode(100), 0)) {
    return OreInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a ore instruction.'
  );
}

export type ParsedOreInstruction<
  TProgram extends string = 'oreV2ZymfyeXgNgBdqMkumTqqAprVqgBWQfoYkrtKWQ',
> =
  | ({
      instructionType: OreInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({ instructionType: OreInstruction.Mine } & ParsedMineInstruction<TProgram>)
  | ({ instructionType: OreInstruction.Open } & ParsedOpenInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Reset;
    } & ParsedResetInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Stake;
    } & ParsedStakeInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Update;
    } & ParsedUpdateInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Upgrade;
    } & ParsedUpgradeInstruction<TProgram>)
  | ({
      instructionType: OreInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>);
