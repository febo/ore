/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { BusSeeds, findBusPda } from '../pdas';

export const BUS_DISCRIMINATOR = 100;

export function getBusDiscriminatorBytes() {
  return getU64Encoder().encode(BUS_DISCRIMINATOR);
}

export type Bus = {
  discriminator: bigint;
  id: bigint;
  rewards: bigint;
  theoreticalRewards: bigint;
  topBalance: bigint;
};

export type BusArgs = {
  id: number | bigint;
  rewards: number | bigint;
  theoreticalRewards: number | bigint;
  topBalance: number | bigint;
};

export function getBusEncoder(): Encoder<BusArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU64Encoder()],
      ['id', getU64Encoder()],
      ['rewards', getU64Encoder()],
      ['theoreticalRewards', getU64Encoder()],
      ['topBalance', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUS_DISCRIMINATOR })
  );
}

export function getBusDecoder(): Decoder<Bus> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['id', getU64Decoder()],
    ['rewards', getU64Decoder()],
    ['theoreticalRewards', getU64Decoder()],
    ['topBalance', getU64Decoder()],
  ]);
}

export function getBusCodec(): Codec<BusArgs, Bus> {
  return combineCodec(getBusEncoder(), getBusDecoder());
}

export function decodeBus<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Bus, TAddress>;
export function decodeBus<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Bus, TAddress>;
export function decodeBus<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Bus, TAddress> | MaybeAccount<Bus, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBusDecoder()
  );
}

export async function fetchBus<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Bus, TAddress>> {
  const maybeAccount = await fetchMaybeBus(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBus<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Bus, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBus(maybeAccount);
}

export async function fetchAllBus(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Bus>[]> {
  const maybeAccounts = await fetchAllMaybeBus(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBus(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Bus>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBus(maybeAccount));
}

export function getBusSize(): number {
  return 32;
}

export async function fetchBusFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: BusSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Bus>> {
  const maybeAccount = await fetchMaybeBusFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBusFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: BusSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Bus>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findBusPda(seeds, { programAddress });
  return await fetchMaybeBus(rpc, address, fetchConfig);
}
