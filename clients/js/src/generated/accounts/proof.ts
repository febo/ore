/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { ProofSeeds, findProofPda } from '../pdas';

export const PROOF_DISCRIMINATOR = 102;

export function getProofDiscriminatorBytes() {
  return getU64Encoder().encode(PROOF_DISCRIMINATOR);
}

export type Proof = {
  discriminator: bigint;
  authority: Address;
  balance: bigint;
  challenge: ReadonlyUint8Array;
  lastHash: ReadonlyUint8Array;
  lastHashAt: bigint;
  lastStakeAt: bigint;
  miner: Address;
  totalHashes: bigint;
  totalRewards: bigint;
};

export type ProofArgs = {
  authority: Address;
  balance: number | bigint;
  challenge: ReadonlyUint8Array;
  lastHash: ReadonlyUint8Array;
  lastHashAt: number | bigint;
  lastStakeAt: number | bigint;
  miner: Address;
  totalHashes: number | bigint;
  totalRewards: number | bigint;
};

export function getProofEncoder(): Encoder<ProofArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU64Encoder()],
      ['authority', getAddressEncoder()],
      ['balance', getU64Encoder()],
      ['challenge', fixEncoderSize(getBytesEncoder(), 32)],
      ['lastHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['lastHashAt', getI64Encoder()],
      ['lastStakeAt', getI64Encoder()],
      ['miner', getAddressEncoder()],
      ['totalHashes', getU64Encoder()],
      ['totalRewards', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PROOF_DISCRIMINATOR })
  );
}

export function getProofDecoder(): Decoder<Proof> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['authority', getAddressDecoder()],
    ['balance', getU64Decoder()],
    ['challenge', fixDecoderSize(getBytesDecoder(), 32)],
    ['lastHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['lastHashAt', getI64Decoder()],
    ['lastStakeAt', getI64Decoder()],
    ['miner', getAddressDecoder()],
    ['totalHashes', getU64Decoder()],
    ['totalRewards', getU64Decoder()],
  ]);
}

export function getProofCodec(): Codec<ProofArgs, Proof> {
  return combineCodec(getProofEncoder(), getProofDecoder());
}

export function decodeProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Proof, TAddress>;
export function decodeProof<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Proof, TAddress>;
export function decodeProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Proof, TAddress> | MaybeAccount<Proof, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProofDecoder()
  );
}

export async function fetchProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Proof, TAddress>> {
  const maybeAccount = await fetchMaybeProof(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Proof, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProof(maybeAccount);
}

export async function fetchAllProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Proof>[]> {
  const maybeAccounts = await fetchAllMaybeProof(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Proof>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProof(maybeAccount));
}

export function getProofSize(): number {
  return 168;
}

export async function fetchProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Proof>> {
  const maybeAccount = await fetchMaybeProofFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Proof>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProofPda(seeds, { programAddress });
  return await fetchMaybeProof(rpc, address, fetchConfig);
}
