/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { findTreasuryPda } from '../pdas';

export const TREASURY_DISCRIMINATOR = 103;

export function getTreasuryDiscriminatorBytes() {
  return getU64Encoder().encode(TREASURY_DISCRIMINATOR);
}

export type Treasury = { discriminator: bigint };

export type TreasuryArgs = {};

export function getTreasuryEncoder(): Encoder<TreasuryArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU64Encoder()]]),
    (value) => ({ ...value, discriminator: TREASURY_DISCRIMINATOR })
  );
}

export function getTreasuryDecoder(): Decoder<Treasury> {
  return getStructDecoder([['discriminator', getU64Decoder()]]);
}

export function getTreasuryCodec(): Codec<TreasuryArgs, Treasury> {
  return combineCodec(getTreasuryEncoder(), getTreasuryDecoder());
}

export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Treasury, TAddress> | MaybeAccount<Treasury, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTreasuryDecoder()
  );
}

export async function fetchTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Treasury, TAddress>> {
  const maybeAccount = await fetchMaybeTreasury(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Treasury, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTreasury(maybeAccount);
}

export async function fetchAllTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Treasury>[]> {
  const maybeAccounts = await fetchAllMaybeTreasury(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Treasury>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTreasury(maybeAccount));
}

export async function fetchTreasuryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Treasury>> {
  const maybeAccount = await fetchMaybeTreasuryFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTreasuryFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Treasury>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findTreasuryPda({ programAddress });
  return await fetchMaybeTreasury(rpc, address, fetchConfig);
}
