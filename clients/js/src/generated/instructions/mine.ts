/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINE_DISCRIMINATOR = 2;

export function getMineDiscriminatorBytes() {
  return getU8Encoder().encode(MINE_DISCRIMINATOR);
}

export type MineInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBus extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountProof extends string | IAccountMeta<string> = string,
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSlotHashesSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBus extends string ? WritableAccount<TAccountBus> : TAccountBus,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountProof extends string
        ? WritableAccount<TAccountProof>
        : TAccountProof,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountSlotHashesSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashesSysvar>
        : TAccountSlotHashesSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type MineInstructionData = {
  discriminator: number;
  digest: Array<number>;
  nonce: Array<number>;
};

export type MineInstructionDataArgs = {
  digest: Array<number>;
  nonce: Array<number>;
};

export function getMineInstructionDataEncoder(): Encoder<MineInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['digest', getArrayEncoder(getU8Encoder(), { size: 16 })],
      ['nonce', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: MINE_DISCRIMINATOR })
  );
}

export function getMineInstructionDataDecoder(): Decoder<MineInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['digest', getArrayDecoder(getU8Decoder(), { size: 16 })],
    ['nonce', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getMineInstructionDataCodec(): Codec<
  MineInstructionDataArgs,
  MineInstructionData
> {
  return combineCodec(
    getMineInstructionDataEncoder(),
    getMineInstructionDataDecoder()
  );
}

export type MineInput<
  TAccountSigner extends string = string,
  TAccountBus extends string = string,
  TAccountConfig extends string = string,
  TAccountProof extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSlotHashesSysvar extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** bus */
  bus: Address<TAccountBus>;
  /** config */
  config: Address<TAccountConfig>;
  /** proof */
  proof: Address<TAccountProof>;
  /** instructions_sysvar */
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  /** slot_hashes_sysvar */
  slotHashesSysvar?: Address<TAccountSlotHashesSysvar>;
  digest: MineInstructionDataArgs['digest'];
  nonce: MineInstructionDataArgs['nonce'];
};

export function getMineInstruction<
  TAccountSigner extends string,
  TAccountBus extends string,
  TAccountConfig extends string,
  TAccountProof extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSlotHashesSysvar extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: MineInput<
    TAccountSigner,
    TAccountBus,
    TAccountConfig,
    TAccountProof,
    TAccountInstructionsSysvar,
    TAccountSlotHashesSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): MineInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBus,
  TAccountConfig,
  TAccountProof,
  TAccountInstructionsSysvar,
  TAccountSlotHashesSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    bus: { value: input.bus ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    proof: { value: input.proof ?? null, isWritable: true },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    slotHashesSysvar: {
      value: input.slotHashesSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.slotHashesSysvar.value) {
    accounts.slotHashesSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.bus),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.slotHashesSysvar),
    ],
    programAddress,
    data: getMineInstructionDataEncoder().encode(
      args as MineInstructionDataArgs
    ),
  } as MineInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBus,
    TAccountConfig,
    TAccountProof,
    TAccountInstructionsSysvar,
    TAccountSlotHashesSysvar
  >;

  return instruction;
}

export type ParsedMineInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** bus */
    bus: TAccountMetas[1];
    /** config */
    config: TAccountMetas[2];
    /** proof */
    proof: TAccountMetas[3];
    /** instructions_sysvar */
    instructionsSysvar: TAccountMetas[4];
    /** slot_hashes_sysvar */
    slotHashesSysvar: TAccountMetas[5];
  };
  data: MineInstructionData;
};

export function parseMineInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMineInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      bus: getNextAccount(),
      config: getNextAccount(),
      proof: getNextAccount(),
      instructionsSysvar: getNextAccount(),
      slotHashesSysvar: getNextAccount(),
    },
    data: getMineInstructionDataDecoder().decode(instruction.data),
  };
}
