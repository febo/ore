/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const OPEN_DISCRIMINATOR = 3;

export function getOpenDiscriminatorBytes() {
  return getU8Encoder().encode(OPEN_DISCRIMINATOR);
}

export type OpenInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountMiner extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountProofPda extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountSlotHashesSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMiner extends string
        ? ReadonlyAccount<TAccountMiner>
        : TAccountMiner,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountProofPda extends string
        ? WritableAccount<TAccountProofPda>
        : TAccountProofPda,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashesSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashesSysvar>
        : TAccountSlotHashesSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type OpenInstructionData = { discriminator: number; bump: number };

export type OpenInstructionDataArgs = { bump: number };

export function getOpenInstructionDataEncoder(): Encoder<OpenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OPEN_DISCRIMINATOR })
  );
}

export function getOpenInstructionDataDecoder(): Decoder<OpenInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getOpenInstructionDataCodec(): Codec<
  OpenInstructionDataArgs,
  OpenInstructionData
> {
  return combineCodec(
    getOpenInstructionDataEncoder(),
    getOpenInstructionDataDecoder()
  );
}

export type OpenInput<
  TAccountSigner extends string = string,
  TAccountMiner extends string = string,
  TAccountPayer extends string = string,
  TAccountProofPda extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashesSysvar extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** miner */
  miner: Address<TAccountMiner>;
  /** payer */
  payer: Address<TAccountPayer>;
  /** proof_pda */
  proofPda: Address<TAccountProofPda>;
  /** system_program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** slot_hashes_sysvar */
  slotHashesSysvar?: Address<TAccountSlotHashesSysvar>;
  bump: OpenInstructionDataArgs['bump'];
};

export function getOpenInstruction<
  TAccountSigner extends string,
  TAccountMiner extends string,
  TAccountPayer extends string,
  TAccountProofPda extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashesSysvar extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: OpenInput<
    TAccountSigner,
    TAccountMiner,
    TAccountPayer,
    TAccountProofPda,
    TAccountSystemProgram,
    TAccountSlotHashesSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): OpenInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountMiner,
  TAccountPayer,
  TAccountProofPda,
  TAccountSystemProgram,
  TAccountSlotHashesSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    miner: { value: input.miner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    proofPda: { value: input.proofPda ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashesSysvar: {
      value: input.slotHashesSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.slotHashesSysvar.value) {
    accounts.slotHashesSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.miner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.proofPda),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashesSysvar),
    ],
    programAddress,
    data: getOpenInstructionDataEncoder().encode(
      args as OpenInstructionDataArgs
    ),
  } as OpenInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMiner,
    TAccountPayer,
    TAccountProofPda,
    TAccountSystemProgram,
    TAccountSlotHashesSysvar
  >;

  return instruction;
}

export type ParsedOpenInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** miner */
    miner: TAccountMetas[1];
    /** payer */
    payer: TAccountMetas[2];
    /** proof_pda */
    proofPda: TAccountMetas[3];
    /** system_program */
    systemProgram: TAccountMetas[4];
    /** slot_hashes_sysvar */
    slotHashesSysvar: TAccountMetas[5];
  };
  data: OpenInstructionData;
};

export function parseOpenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      miner: getNextAccount(),
      payer: getNextAccount(),
      proofPda: getNextAccount(),
      systemProgram: getNextAccount(),
      slotHashesSysvar: getNextAccount(),
    },
    data: getOpenInstructionDataDecoder().decode(instruction.data),
  };
}
