/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = 100;

export function getInitializeDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBus0 extends string | IAccountMeta<string> = string,
  TAccountBus1 extends string | IAccountMeta<string> = string,
  TAccountBus2 extends string | IAccountMeta<string> = string,
  TAccountBus3 extends string | IAccountMeta<string> = string,
  TAccountBus4 extends string | IAccountMeta<string> = string,
  TAccountBus5 extends string | IAccountMeta<string> = string,
  TAccountBus6 extends string | IAccountMeta<string> = string,
  TAccountBus7 extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokens extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountMetadataProgram extends string | IAccountMeta<string> = string,
  TAccountRentSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBus0 extends string
        ? WritableAccount<TAccountBus0>
        : TAccountBus0,
      TAccountBus1 extends string
        ? WritableAccount<TAccountBus1>
        : TAccountBus1,
      TAccountBus2 extends string
        ? WritableAccount<TAccountBus2>
        : TAccountBus2,
      TAccountBus3 extends string
        ? WritableAccount<TAccountBus3>
        : TAccountBus3,
      TAccountBus4 extends string
        ? WritableAccount<TAccountBus4>
        : TAccountBus4,
      TAccountBus5 extends string
        ? WritableAccount<TAccountBus5>
        : TAccountBus5,
      TAccountBus6 extends string
        ? WritableAccount<TAccountBus6>
        : TAccountBus6,
      TAccountBus7 extends string
        ? WritableAccount<TAccountBus7>
        : TAccountBus7,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryTokens extends string
        ? WritableAccount<TAccountTreasuryTokens>
        : TAccountTreasuryTokens,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountRentSysvar extends string
        ? ReadonlyAccount<TAccountRentSysvar>
        : TAccountRentSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: number;
  bus0Bump: number;
  bus1Bump: number;
  bus2Bump: number;
  bus3Bump: number;
  bus4Bump: number;
  bus5Bump: number;
  bus6Bump: number;
  bus7Bump: number;
  configBump: number;
  metadataBump: number;
  mintBump: number;
  treasuryBump: number;
};

export type InitializeInstructionDataArgs = {
  bus0Bump: number;
  bus1Bump: number;
  bus2Bump: number;
  bus3Bump: number;
  bus4Bump: number;
  bus5Bump: number;
  bus6Bump: number;
  bus7Bump: number;
  configBump: number;
  metadataBump: number;
  mintBump: number;
  treasuryBump: number;
};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bus0Bump', getU8Encoder()],
      ['bus1Bump', getU8Encoder()],
      ['bus2Bump', getU8Encoder()],
      ['bus3Bump', getU8Encoder()],
      ['bus4Bump', getU8Encoder()],
      ['bus5Bump', getU8Encoder()],
      ['bus6Bump', getU8Encoder()],
      ['bus7Bump', getU8Encoder()],
      ['configBump', getU8Encoder()],
      ['metadataBump', getU8Encoder()],
      ['mintBump', getU8Encoder()],
      ['treasuryBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bus0Bump', getU8Decoder()],
    ['bus1Bump', getU8Decoder()],
    ['bus2Bump', getU8Decoder()],
    ['bus3Bump', getU8Decoder()],
    ['bus4Bump', getU8Decoder()],
    ['bus5Bump', getU8Decoder()],
    ['bus6Bump', getU8Decoder()],
    ['bus7Bump', getU8Decoder()],
    ['configBump', getU8Decoder()],
    ['metadataBump', getU8Decoder()],
    ['mintBump', getU8Decoder()],
    ['treasuryBump', getU8Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeInput<
  TAccountSigner extends string = string,
  TAccountBus0 extends string = string,
  TAccountBus1 extends string = string,
  TAccountBus2 extends string = string,
  TAccountBus3 extends string = string,
  TAccountBus4 extends string = string,
  TAccountBus5 extends string = string,
  TAccountBus6 extends string = string,
  TAccountBus7 extends string = string,
  TAccountConfig extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryTokens extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountRentSysvar extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** bus_0 */
  bus0: Address<TAccountBus0>;
  /** bus_1 */
  bus1: Address<TAccountBus1>;
  /** bus_2 */
  bus2: Address<TAccountBus2>;
  /** bus_3 */
  bus3: Address<TAccountBus3>;
  /** bus_4 */
  bus4: Address<TAccountBus4>;
  /** bus_5 */
  bus5: Address<TAccountBus5>;
  /** bus_6 */
  bus6: Address<TAccountBus6>;
  /** bus_7 */
  bus7: Address<TAccountBus7>;
  /** config */
  config: Address<TAccountConfig>;
  /** metadata */
  metadata: Address<TAccountMetadata>;
  /** mint */
  mint: Address<TAccountMint>;
  /** treasury */
  treasury: Address<TAccountTreasury>;
  /** treasury_tokens */
  treasuryTokens: Address<TAccountTreasuryTokens>;
  /** system_program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** associated_token_program */
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  /** metadata_program */
  metadataProgram: Address<TAccountMetadataProgram>;
  /** rent_sysvar */
  rentSysvar?: Address<TAccountRentSysvar>;
  bus0Bump: InitializeInstructionDataArgs['bus0Bump'];
  bus1Bump: InitializeInstructionDataArgs['bus1Bump'];
  bus2Bump: InitializeInstructionDataArgs['bus2Bump'];
  bus3Bump: InitializeInstructionDataArgs['bus3Bump'];
  bus4Bump: InitializeInstructionDataArgs['bus4Bump'];
  bus5Bump: InitializeInstructionDataArgs['bus5Bump'];
  bus6Bump: InitializeInstructionDataArgs['bus6Bump'];
  bus7Bump: InitializeInstructionDataArgs['bus7Bump'];
  configBump: InitializeInstructionDataArgs['configBump'];
  metadataBump: InitializeInstructionDataArgs['metadataBump'];
  mintBump: InitializeInstructionDataArgs['mintBump'];
  treasuryBump: InitializeInstructionDataArgs['treasuryBump'];
};

export function getInitializeInstruction<
  TAccountSigner extends string,
  TAccountBus0 extends string,
  TAccountBus1 extends string,
  TAccountBus2 extends string,
  TAccountBus3 extends string,
  TAccountBus4 extends string,
  TAccountBus5 extends string,
  TAccountBus6 extends string,
  TAccountBus7 extends string,
  TAccountConfig extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TAccountTreasury extends string,
  TAccountTreasuryTokens extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountRentSysvar extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountSigner,
    TAccountBus0,
    TAccountBus1,
    TAccountBus2,
    TAccountBus3,
    TAccountBus4,
    TAccountBus5,
    TAccountBus6,
    TAccountBus7,
    TAccountConfig,
    TAccountMetadata,
    TAccountMint,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountRentSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBus0,
  TAccountBus1,
  TAccountBus2,
  TAccountBus3,
  TAccountBus4,
  TAccountBus5,
  TAccountBus6,
  TAccountBus7,
  TAccountConfig,
  TAccountMetadata,
  TAccountMint,
  TAccountTreasury,
  TAccountTreasuryTokens,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountMetadataProgram,
  TAccountRentSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: false },
    bus0: { value: input.bus0 ?? null, isWritable: true },
    bus1: { value: input.bus1 ?? null, isWritable: true },
    bus2: { value: input.bus2 ?? null, isWritable: true },
    bus3: { value: input.bus3 ?? null, isWritable: true },
    bus4: { value: input.bus4 ?? null, isWritable: true },
    bus5: { value: input.bus5 ?? null, isWritable: true },
    bus6: { value: input.bus6 ?? null, isWritable: true },
    bus7: { value: input.bus7 ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryTokens: { value: input.treasuryTokens ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.bus0),
      getAccountMeta(accounts.bus1),
      getAccountMeta(accounts.bus2),
      getAccountMeta(accounts.bus3),
      getAccountMeta(accounts.bus4),
      getAccountMeta(accounts.bus5),
      getAccountMeta(accounts.bus6),
      getAccountMeta(accounts.bus7),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryTokens),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.rentSysvar),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBus0,
    TAccountBus1,
    TAccountBus2,
    TAccountBus3,
    TAccountBus4,
    TAccountBus5,
    TAccountBus6,
    TAccountBus7,
    TAccountConfig,
    TAccountMetadata,
    TAccountMint,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountRentSysvar
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** bus_0 */
    bus0: TAccountMetas[1];
    /** bus_1 */
    bus1: TAccountMetas[2];
    /** bus_2 */
    bus2: TAccountMetas[3];
    /** bus_3 */
    bus3: TAccountMetas[4];
    /** bus_4 */
    bus4: TAccountMetas[5];
    /** bus_5 */
    bus5: TAccountMetas[6];
    /** bus_6 */
    bus6: TAccountMetas[7];
    /** bus_7 */
    bus7: TAccountMetas[8];
    /** config */
    config: TAccountMetas[9];
    /** metadata */
    metadata: TAccountMetas[10];
    /** mint */
    mint: TAccountMetas[11];
    /** treasury */
    treasury: TAccountMetas[12];
    /** treasury_tokens */
    treasuryTokens: TAccountMetas[13];
    /** system_program */
    systemProgram: TAccountMetas[14];
    /** token_program */
    tokenProgram: TAccountMetas[15];
    /** associated_token_program */
    associatedTokenProgram: TAccountMetas[16];
    /** metadata_program */
    metadataProgram: TAccountMetas[17];
    /** rent_sysvar */
    rentSysvar: TAccountMetas[18];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 19) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      bus0: getNextAccount(),
      bus1: getNextAccount(),
      bus2: getNextAccount(),
      bus3: getNextAccount(),
      bus4: getNextAccount(),
      bus5: getNextAccount(),
      bus6: getNextAccount(),
      bus7: getNextAccount(),
      config: getNextAccount(),
      metadata: getNextAccount(),
      mint: getNextAccount(),
      treasury: getNextAccount(),
      treasuryTokens: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
      rentSysvar: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
