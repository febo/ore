/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_DISCRIMINATOR = 1;

export function getCloseDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_DISCRIMINATOR);
}

export type CloseInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountProof extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProof extends string
        ? WritableAccount<TAccountProof>
        : TAccountProof,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInstructionData = { discriminator: number };

export type CloseInstructionDataArgs = {};

export function getCloseInstructionDataEncoder(): Encoder<CloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CLOSE_DISCRIMINATOR })
  );
}

export function getCloseInstructionDataDecoder(): Decoder<CloseInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseInstructionDataCodec(): Codec<
  CloseInstructionDataArgs,
  CloseInstructionData
> {
  return combineCodec(
    getCloseInstructionDataEncoder(),
    getCloseInstructionDataDecoder()
  );
}

export type CloseInput<
  TAccountSigner extends string = string,
  TAccountProof extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** proof */
  proof: Address<TAccountProof>;
  /** system_program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseInstruction<
  TAccountSigner extends string,
  TAccountProof extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: CloseInput<TAccountSigner, TAccountProof, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): CloseInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountProof,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    proof: { value: input.proof ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseInstructionDataEncoder().encode({}),
  } as CloseInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountProof,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCloseInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** proof */
    proof: TAccountMetas[1];
    /** system_program */
    systemProgram: TAccountMetas[2];
  };
  data: CloseInstructionData;
};

export function parseCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      proof: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseInstructionDataDecoder().decode(instruction.data),
  };
}
