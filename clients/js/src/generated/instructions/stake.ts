/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const STAKE_DISCRIMINATOR = 5;

export function getStakeDiscriminatorBytes() {
  return getU8Encoder().encode(STAKE_DISCRIMINATOR);
}

export type StakeInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountProof extends string | IAccountMeta<string> = string,
  TAccountSender extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokens extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProof extends string
        ? WritableAccount<TAccountProof>
        : TAccountProof,
      TAccountSender extends string
        ? WritableAccount<TAccountSender>
        : TAccountSender,
      TAccountTreasuryTokens extends string
        ? WritableAccount<TAccountTreasuryTokens>
        : TAccountTreasuryTokens,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type StakeInstructionData = {
  discriminator: number;
  amount: Array<number>;
};

export type StakeInstructionDataArgs = { amount: Array<number> };

export function getStakeInstructionDataEncoder(): Encoder<StakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: STAKE_DISCRIMINATOR })
  );
}

export function getStakeInstructionDataDecoder(): Decoder<StakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getStakeInstructionDataCodec(): Codec<
  StakeInstructionDataArgs,
  StakeInstructionData
> {
  return combineCodec(
    getStakeInstructionDataEncoder(),
    getStakeInstructionDataDecoder()
  );
}

export type StakeInput<
  TAccountSigner extends string = string,
  TAccountProof extends string = string,
  TAccountSender extends string = string,
  TAccountTreasuryTokens extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** proof */
  proof: Address<TAccountProof>;
  /** sender */
  sender: Address<TAccountSender>;
  /** treasury_tokens */
  treasuryTokens: Address<TAccountTreasuryTokens>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: StakeInstructionDataArgs['amount'];
};

export function getStakeInstruction<
  TAccountSigner extends string,
  TAccountProof extends string,
  TAccountSender extends string,
  TAccountTreasuryTokens extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: StakeInput<
    TAccountSigner,
    TAccountProof,
    TAccountSender,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): StakeInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountProof,
  TAccountSender,
  TAccountTreasuryTokens,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    proof: { value: input.proof ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    treasuryTokens: { value: input.treasuryTokens ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.treasuryTokens),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode(
      args as StakeInstructionDataArgs
    ),
  } as StakeInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountProof,
    TAccountSender,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedStakeInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** proof */
    proof: TAccountMetas[1];
    /** sender */
    sender: TAccountMetas[2];
    /** treasury_tokens */
    treasuryTokens: TAccountMetas[3];
    /** token_program */
    tokenProgram: TAccountMetas[4];
  };
  data: StakeInstructionData;
};

export function parseStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      proof: getNextAccount(),
      sender: getNextAccount(),
      treasuryTokens: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getStakeInstructionDataDecoder().decode(instruction.data),
  };
}
