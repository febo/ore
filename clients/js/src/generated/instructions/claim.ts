/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_DISCRIMINATOR = 0;

export function getClaimDiscriminatorBytes() {
  return getU8Encoder().encode(CLAIM_DISCRIMINATOR);
}

export type ClaimInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBeneficiary extends string | IAccountMeta<string> = string,
  TAccountProof extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokens extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBeneficiary extends string
        ? WritableAccount<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountProof extends string
        ? WritableAccount<TAccountProof>
        : TAccountProof,
      TAccountTreasury extends string
        ? ReadonlyAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryTokens extends string
        ? WritableAccount<TAccountTreasuryTokens>
        : TAccountTreasuryTokens,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimInstructionData = {
  discriminator: number;
  amount: Array<number>;
};

export type ClaimInstructionDataArgs = { amount: Array<number> };

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR })
  );
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder()
  );
}

export type ClaimInput<
  TAccountSigner extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountProof extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryTokens extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** beneficiary */
  beneficiary: Address<TAccountBeneficiary>;
  /** proof */
  proof: Address<TAccountProof>;
  /** treasury */
  treasury: Address<TAccountTreasury>;
  /** treasury_tokens */
  treasuryTokens: Address<TAccountTreasuryTokens>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: ClaimInstructionDataArgs['amount'];
};

export function getClaimInstruction<
  TAccountSigner extends string,
  TAccountBeneficiary extends string,
  TAccountProof extends string,
  TAccountTreasury extends string,
  TAccountTreasuryTokens extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountSigner,
    TAccountBeneficiary,
    TAccountProof,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBeneficiary,
  TAccountProof,
  TAccountTreasury,
  TAccountTreasuryTokens,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    proof: { value: input.proof ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: false },
    treasuryTokens: { value: input.treasuryTokens ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryTokens),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBeneficiary,
    TAccountProof,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** beneficiary */
    beneficiary: TAccountMetas[1];
    /** proof */
    proof: TAccountMetas[2];
    /** treasury */
    treasury: TAccountMetas[3];
    /** treasury_tokens */
    treasuryTokens: TAccountMetas[4];
    /** token_program */
    tokenProgram: TAccountMetas[5];
  };
  data: ClaimInstructionData;
};

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      beneficiary: getNextAccount(),
      proof: getNextAccount(),
      treasury: getNextAccount(),
      treasuryTokens: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  };
}
