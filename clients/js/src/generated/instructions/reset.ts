/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESET_DISCRIMINATOR = 4;

export function getResetDiscriminatorBytes() {
  return getU8Encoder().encode(RESET_DISCRIMINATOR);
}

export type ResetInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBus0 extends string | IAccountMeta<string> = string,
  TAccountBus1 extends string | IAccountMeta<string> = string,
  TAccountBus2 extends string | IAccountMeta<string> = string,
  TAccountBus3 extends string | IAccountMeta<string> = string,
  TAccountBus4 extends string | IAccountMeta<string> = string,
  TAccountBus5 extends string | IAccountMeta<string> = string,
  TAccountBus6 extends string | IAccountMeta<string> = string,
  TAccountBus7 extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokens extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBus0 extends string
        ? WritableAccount<TAccountBus0>
        : TAccountBus0,
      TAccountBus1 extends string
        ? WritableAccount<TAccountBus1>
        : TAccountBus1,
      TAccountBus2 extends string
        ? WritableAccount<TAccountBus2>
        : TAccountBus2,
      TAccountBus3 extends string
        ? WritableAccount<TAccountBus3>
        : TAccountBus3,
      TAccountBus4 extends string
        ? WritableAccount<TAccountBus4>
        : TAccountBus4,
      TAccountBus5 extends string
        ? WritableAccount<TAccountBus5>
        : TAccountBus5,
      TAccountBus6 extends string
        ? WritableAccount<TAccountBus6>
        : TAccountBus6,
      TAccountBus7 extends string
        ? WritableAccount<TAccountBus7>
        : TAccountBus7,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryTokens extends string
        ? WritableAccount<TAccountTreasuryTokens>
        : TAccountTreasuryTokens,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResetInstructionData = { discriminator: number };

export type ResetInstructionDataArgs = {};

export function getResetInstructionDataEncoder(): Encoder<ResetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: RESET_DISCRIMINATOR })
  );
}

export function getResetInstructionDataDecoder(): Decoder<ResetInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getResetInstructionDataCodec(): Codec<
  ResetInstructionDataArgs,
  ResetInstructionData
> {
  return combineCodec(
    getResetInstructionDataEncoder(),
    getResetInstructionDataDecoder()
  );
}

export type ResetInput<
  TAccountSigner extends string = string,
  TAccountBus0 extends string = string,
  TAccountBus1 extends string = string,
  TAccountBus2 extends string = string,
  TAccountBus3 extends string = string,
  TAccountBus4 extends string = string,
  TAccountBus5 extends string = string,
  TAccountBus6 extends string = string,
  TAccountBus7 extends string = string,
  TAccountConfig extends string = string,
  TAccountMint extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryTokens extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** signer */
  signer: TransactionSigner<TAccountSigner>;
  /** bus_0 */
  bus0: Address<TAccountBus0>;
  /** bus_1 */
  bus1: Address<TAccountBus1>;
  /** bus_2 */
  bus2: Address<TAccountBus2>;
  /** bus_3 */
  bus3: Address<TAccountBus3>;
  /** bus_4 */
  bus4: Address<TAccountBus4>;
  /** bus_5 */
  bus5: Address<TAccountBus5>;
  /** bus_6 */
  bus6: Address<TAccountBus6>;
  /** bus_7 */
  bus7: Address<TAccountBus7>;
  /** config */
  config: Address<TAccountConfig>;
  /** mint */
  mint: Address<TAccountMint>;
  /** treasury */
  treasury: Address<TAccountTreasury>;
  /** treasury_tokens */
  treasuryTokens: Address<TAccountTreasuryTokens>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getResetInstruction<
  TAccountSigner extends string,
  TAccountBus0 extends string,
  TAccountBus1 extends string,
  TAccountBus2 extends string,
  TAccountBus3 extends string,
  TAccountBus4 extends string,
  TAccountBus5 extends string,
  TAccountBus6 extends string,
  TAccountBus7 extends string,
  TAccountConfig extends string,
  TAccountMint extends string,
  TAccountTreasury extends string,
  TAccountTreasuryTokens extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ORE_PROGRAM_ADDRESS,
>(
  input: ResetInput<
    TAccountSigner,
    TAccountBus0,
    TAccountBus1,
    TAccountBus2,
    TAccountBus3,
    TAccountBus4,
    TAccountBus5,
    TAccountBus6,
    TAccountBus7,
    TAccountConfig,
    TAccountMint,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResetInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBus0,
  TAccountBus1,
  TAccountBus2,
  TAccountBus3,
  TAccountBus4,
  TAccountBus5,
  TAccountBus6,
  TAccountBus7,
  TAccountConfig,
  TAccountMint,
  TAccountTreasury,
  TAccountTreasuryTokens,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    bus0: { value: input.bus0 ?? null, isWritable: true },
    bus1: { value: input.bus1 ?? null, isWritable: true },
    bus2: { value: input.bus2 ?? null, isWritable: true },
    bus3: { value: input.bus3 ?? null, isWritable: true },
    bus4: { value: input.bus4 ?? null, isWritable: true },
    bus5: { value: input.bus5 ?? null, isWritable: true },
    bus6: { value: input.bus6 ?? null, isWritable: true },
    bus7: { value: input.bus7 ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryTokens: { value: input.treasuryTokens ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.bus0),
      getAccountMeta(accounts.bus1),
      getAccountMeta(accounts.bus2),
      getAccountMeta(accounts.bus3),
      getAccountMeta(accounts.bus4),
      getAccountMeta(accounts.bus5),
      getAccountMeta(accounts.bus6),
      getAccountMeta(accounts.bus7),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryTokens),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getResetInstructionDataEncoder().encode({}),
  } as ResetInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBus0,
    TAccountBus1,
    TAccountBus2,
    TAccountBus3,
    TAccountBus4,
    TAccountBus5,
    TAccountBus6,
    TAccountBus7,
    TAccountConfig,
    TAccountMint,
    TAccountTreasury,
    TAccountTreasuryTokens,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedResetInstruction<
  TProgram extends string = typeof ORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** signer */
    signer: TAccountMetas[0];
    /** bus_0 */
    bus0: TAccountMetas[1];
    /** bus_1 */
    bus1: TAccountMetas[2];
    /** bus_2 */
    bus2: TAccountMetas[3];
    /** bus_3 */
    bus3: TAccountMetas[4];
    /** bus_4 */
    bus4: TAccountMetas[5];
    /** bus_5 */
    bus5: TAccountMetas[6];
    /** bus_6 */
    bus6: TAccountMetas[7];
    /** bus_7 */
    bus7: TAccountMetas[8];
    /** config */
    config: TAccountMetas[9];
    /** mint */
    mint: TAccountMetas[10];
    /** treasury */
    treasury: TAccountMetas[11];
    /** treasury_tokens */
    treasuryTokens: TAccountMetas[12];
    /** token_program */
    tokenProgram: TAccountMetas[13];
  };
  data: ResetInstructionData;
};

export function parseResetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      bus0: getNextAccount(),
      bus1: getNextAccount(),
      bus2: getNextAccount(),
      bus3: getNextAccount(),
      bus4: getNextAccount(),
      bus5: getNextAccount(),
      bus6: getNextAccount(),
      bus7: getNextAccount(),
      config: getNextAccount(),
      mint: getNextAccount(),
      treasury: getNextAccount(),
      treasuryTokens: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getResetInstructionDataDecoder().decode(instruction.data),
  };
}
