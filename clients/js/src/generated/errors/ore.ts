/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { ORE_PROGRAM_ADDRESS } from '../programs';

/** NeedsReset: The epoch has ended and needs reset */
export const ORE_ERROR__NEEDS_RESET = 0x0; // 0
/** HashInvalid: The provided hash is invalid */
export const ORE_ERROR__HASH_INVALID = 0x1; // 1
/** HashTooEasy: The provided hash did not satisfy the minimum required difficulty */
export const ORE_ERROR__HASH_TOO_EASY = 0x2; // 2
/** ClaimTooLarge: The claim amount cannot be greater than the claimable rewards */
export const ORE_ERROR__CLAIM_TOO_LARGE = 0x3; // 3
/** ClockInvalid: The clock time is invalid */
export const ORE_ERROR__CLOCK_INVALID = 0x4; // 4
/** Spam: You are trying to submit too soon */
export const ORE_ERROR__SPAM = 0x5; // 5
/** MaxSupply: The maximum supply has been reached */
export const ORE_ERROR__MAX_SUPPLY = 0x6; // 6
/** AuthFailed: The proof does not match the expected account */
export const ORE_ERROR__AUTH_FAILED = 0x7; // 7

export type OreError =
  | typeof ORE_ERROR__AUTH_FAILED
  | typeof ORE_ERROR__CLAIM_TOO_LARGE
  | typeof ORE_ERROR__CLOCK_INVALID
  | typeof ORE_ERROR__HASH_INVALID
  | typeof ORE_ERROR__HASH_TOO_EASY
  | typeof ORE_ERROR__MAX_SUPPLY
  | typeof ORE_ERROR__NEEDS_RESET
  | typeof ORE_ERROR__SPAM;

let oreErrorMessages: Record<OreError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  oreErrorMessages = {
    [ORE_ERROR__AUTH_FAILED]: `The proof does not match the expected account`,
    [ORE_ERROR__CLAIM_TOO_LARGE]: `The claim amount cannot be greater than the claimable rewards`,
    [ORE_ERROR__CLOCK_INVALID]: `The clock time is invalid`,
    [ORE_ERROR__HASH_INVALID]: `The provided hash is invalid`,
    [ORE_ERROR__HASH_TOO_EASY]: `The provided hash did not satisfy the minimum required difficulty`,
    [ORE_ERROR__MAX_SUPPLY]: `The maximum supply has been reached`,
    [ORE_ERROR__NEEDS_RESET]: `The epoch has ended and needs reset`,
    [ORE_ERROR__SPAM]: `You are trying to submit too soon`,
  };
}

export function getOreErrorMessage(code: OreError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (oreErrorMessages as Record<OreError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isOreError<TProgramErrorCode extends OreError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ORE_PROGRAM_ADDRESS,
    code
  );
}
